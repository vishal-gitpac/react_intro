{"ast":null,"code":"var _jsxFileName = \"/Users/vishalsmac/Documents/web development/react intro/my-app/src/components/RQFaq.js\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\nimport Ques from \"../question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchdata = () => {\n  return axios.get(\"http://localhost:5000/api/Faq\");\n};\n//react query manages cache very well.\n//has 4 flags fetching stale fresh inactive\n//stale can be set using stale time where the data stays fresh until the time provided is done\n//useQuery function contains and promise to return which can be loading status , error and data fetched\n//also has cahetime , refetchOnMount : true or false\n//refetchwindow focus which enables us to stay sync with database changes\n//polling is refetching data at regular at regular time intervals refetchInterval\n//refetchIntervalInBackground : true to poll data even when browser is not in focus\n\nexport const RqFaq = () => {\n  _s();\n  const {\n    isLoading,\n    data\n  } = useQuery(\"questions\", fetchdata);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data === null || data === void 0 ? void 0 : data.data.map(f => {\n      return /*#__PURE__*/_jsxDEV(Ques, {\n        id: f.id,\n        title: f.title,\n        info: f.info\n      }, q.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(RqFaq, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n_c = RqFaq;\nvar _c;\n$RefreshReg$(_c, \"RqFaq\");","map":{"version":3,"names":["useQuery","axios","Ques","fetchdata","get","RqFaq","isLoading","data","map","f","id","title","info","q"],"sources":["/Users/vishalsmac/Documents/web development/react intro/my-app/src/components/RQFaq.js"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport axios from \"axios\";\nimport Ques from \"../question\";\n\nconst fetchdata = () => {\n  return axios.get(\"http://localhost:5000/api/Faq\");\n};\n//react query manages cache very well.\n//has 4 flags fetching stale fresh inactive\n//stale can be set using stale time where the data stays fresh until the time provided is done\n//useQuery function contains and promise to return which can be loading status , error and data fetched\n//also has cahetime , refetchOnMount : true or false\n//refetchwindow focus which enables us to stay sync with database changes\n//polling is refetching data at regular at regular time intervals refetchInterval\n//refetchIntervalInBackground : true to poll data even when browser is not in focus\n\nexport const RqFaq = () => {\n  const { isLoading, data } = useQuery(\"questions\", fetchdata);\n  if (isLoading) {\n    return <div>Loading</div>;\n  }\n  return (\n    <div>\n      {data?.data.map((f) => {\n        return <Ques key={q.id} id={f.id} title={f.title} info={f.info} />;\n      })}\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,aAAa;AAAC;AAE/B,MAAMC,SAAS,GAAG,MAAM;EACtB,OAAOF,KAAK,CAACG,GAAG,CAAC,+BAA+B,CAAC;AACnD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;EAAA;EACzB,MAAM;IAAEC,SAAS;IAAEC;EAAK,CAAC,GAAGP,QAAQ,CAAC,WAAW,EAAEG,SAAS,CAAC;EAC5D,IAAIG,SAAS,EAAE;IACb,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB;EAC3B;EACA,oBACE;IAAA,UACGC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,CAACC,GAAG,CAAEC,CAAC,IAAK;MACrB,oBAAO,QAAC,IAAI;QAAY,EAAE,EAAEA,CAAC,CAACC,EAAG;QAAC,KAAK,EAAED,CAAC,CAACE,KAAM;QAAC,IAAI,EAAEF,CAAC,CAACG;MAAK,GAA7CC,CAAC,CAACH,EAAE;QAAA;QAAA;QAAA;MAAA,QAA4C;IACpE,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GAZWL,KAAK;EAAA,QACYL,QAAQ;AAAA;AAAA,KADzBK,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}